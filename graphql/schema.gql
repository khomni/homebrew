scalar DateTime

# ==============================
# Queries
# ==============================

type Query {
	session: Session
	user(id: ID!): User

	# Calendar: query the calendar based on optional year, motnh, day arguments OR a start and end timestamp
	calendar(campaign: ID! year: Int, month: Int, day: Int, start: Int, end: Int): Calendar
	character(slug: String, campaign: ID, user: ID, search: String): [Character]
	campaign(slug: String): [Campaign]
	item(slug: String, character: ID, search: String): ItemCollection
}

# ==============================
# Mutations
# ==============================

type Mutation {
	campaign(campaign: CampaignInput): Campaign
	character(character: CharacterInput): Character
}


# ==============================
# Mutations
# ==============================

interface Node {
	id: ID!
}

type Session {
	user: User
	character: Character
	campaign: Campaign
}

# ==============================
# Types
# ==============================

type Image implements Node {
	id: ID!
	path: String
	node: Node
}

type User implements Node {
	id: ID!
	character: Character
	characters: [Character!]!
	email: String
	url: String
	username: String
}

type Character implements Node {
	id: ID!
	name: String
	campaign: Campaign
	images: [Image!]!
	items: ItemCollection
	journal: [Journal!]!
	knowledge: [Lore!]!
	lore: [Lore!]!
	url: String
}

input CharacterInput {
	id: ID
	name: String
	url: String
}

type Item implements Node {
	id: ID!
	name: String
	value: Float
	weight: Float
	quantity: Int
	total_value: Float
	total_weight: Float
	total_quantity: Int
	lore: [Lore!]!
	items: ItemCollection
	url: String
}

# Meta item information
type ItemCollection {
	items: [Item!]!
	total_quantity: Int
	total_weight: Float
	total_value: Float
}

type Lore implements Node {
	id: ID!
	topic: Node
	owner: User
	content: String
	url: String
}

type Journal implements Node {
	id: ID!
	title: String
	content: String
	url: String
}

type Campaign implements Node {
	id: ID!
	name: String
	system: System
	characters: [Character!]!
	lore: [Lore!]!
	quests: [Quest!]!
	url: String
	calendar: Calendar
	privacy_level: String
}

input CampaignInput {
	id: ID
	url: String
	name: String!
	system: String
	privacy_level: String
}

# ==============================
# Calendar Types
# 	- Calendar
#	- CalendarConnection
#	- Event
# ==============================

type Calendar {
	year_length: Int
	weekdays: [String]
	months: [String]
	events: EventConnection
}

type EventConnection {
	years: [Year!]!
}

type Year {
	year: Int!
	months: [Month!]!

}

type Month {
	name: String
	weeks: [Week!]!
}

type Week {
	days: [Day]!
}

type Day {
	is_present: Boolean
	events: [Event]
}

type Event {
	timestamp: Int
	time: String
	name: String

}

enum QuestStatus {
	complete
	active
	failed
}

type Quest implements Node {
	id: ID!
	name: String
	description: String
	status: QuestStatus
	subquests: [Quest!]!
	comments: CommentSection
	# comments: [Comment!]!
	url: String
}

type Comment implements Node {
	id: ID!
	createdAt: DateTime
	body: String
	archived: Boolean
	character: Character
	children: [Comment!]!
}

type CommentSection {
	children: [Comment!]!
	total: Int
}

type System {
	name: String
	publisher: String
	year: Int
}
